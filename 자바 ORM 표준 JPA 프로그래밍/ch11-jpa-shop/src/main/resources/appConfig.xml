<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 스프링 프레임워크가 제공하는 어노테이션 기반의 트랜잭션 관리자를 활성화
         이 기능은 @Transactional이 붙은 곳에 트랜잭션을 적용 -->
    <tx:annotation-driven/>

    <context:component-scan base-package="jpabook.jpashop.service, jpabook.jpashop.repository"/>

    <!-- 데이터 소스 설정
         데이터베이스에 접근할 데이터 소스를 등록함
         여기서는 H2 데이터베이스의 접속 URL을 jdbc:h2:mem:...으로 설정해서
         JVM 안에서 동작하는 인 메모리 데이터베이스로 사용함
         인 메모리 데이터베이스를 사용하면 별도의 데이터베이스 서버를 실행하지 않아도 됨
         이제 애플리케이션을 시작할 때 데이터베이스도 애플리케이션 안에서 함께 실행되고
         애플리케이션을 종료할 때 데이터베이스도 함께 사라짐 -->
    <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource">
        <property name="driverClassName" value="org.h2.Driver"/>
        <property name="url" value="jdbc:h2:mem:jpashop"/>
        <property name="username" value="sa"/>
        <property name="password" value=""/>
    </bean>

    <!-- 트랜잭션 관리자를 등록
         일반적으로 org.springframework.jdbc.datasource.DataSourceTransactionManager를 트랜잭션 관리자로 사용하지만
         JPA를 사용하려면 org.springframework.orm.jpa.JpaTransactionManager를 트랜잭션 관리자로 등록
         이 트랜잭션 관리자는 DataSourceTransactionManager가 하던 역할도 수행하므로
         JPA 뿐만 아니라 JdbcTemplate, MyBatis와 함께 사용할 수 있음 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- JPA 예외 변환 AOP 설정
         PersistenceExceptionTranslationPostProcessor는
         @Repository 어노테이션이 붙어 있는 스프링 빈에 예외 변환 AOP를 적용
         이 AOP는 JPA 예외를 스프링 프레임워크가 추상화한 예외로 변환해 줌 -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

    <!-- JPA 설정 - 엔티티 매니저 팩토리 등록
         스프링 프레임워크에서 JPA를 사용하려면 스프링 프레임워크가 제공하는
         LocalContainerEntityManagerFactoryBean을 스프링 빈으로 등록해야 함
         순수하게 자바만 사용하는 J2SE 환경에서는 persistence.xml에 엔티티 매니저 팩토리 정보를 설정하지만
         스프링 프레임워크에서 JPA를 사용하려면 스프링 프레임워크가 제공하는 방식으로 엔티티 매니저 팩토리를 등록해야 함
         여기서 필요한 설정을 다 할 수 있기 때문에 persistence.xml이 없이도 동작함
         persistenceUnitName 속성을 사용해서 영속성 유닛 이름을 지정하면 persistence.xml에 설정한 정보도 사용할 수 있음 -->
    <!-- LocalContainerEntityManagerFactoryBean : JPA를 스프링 컨테이너에서 사용할 수 있도록 스프링 프레임워크가 제공하는 기능 -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <!-- datasource : 사용할 데이터소스 등록 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- packageToScan : @Entity 탐색 시작 위치, @Entit가 붙은 클래스를 자동으로 검색하기 위한 시작점을 지정  -->
        <property name="packagesToScan" value="jpabook.jpashop.domain"/>
        <!-- persistenceUniName : 영속성 유닛 이름을 설정하며, 여기처럼 이름을 설정하지 않으면 default라는 이름의 영속성 유닛 생성 -->
        <!-- jpaVendorAdapter: 사용할 JPA 벤더를 설정 -->
        <property name="jpaVendorAdapter">
            <!-- 하이버네이트 구현체를 사용하므로 HibernateJpaVendorAdapter 등록 -->
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>
        <!-- jpaProperties를 사용해서 하이버네이트 구현체의 속성을 설정 -->
        <property name="jpaProperties"> <!-- 하이버네이트 상세 설정 -->
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop> <!-- 방언 -->
                <prop key="hibernate.show_sql">true</prop>                   <!-- SQL 보기 -->
                <prop key="hibernate.format_sql">true</prop>                 <!-- SQL 정렬해서 보기 -->
                <prop key="hibernate.use_sql_comments">true</prop>           <!-- SQL 코멘트 보기 -->
                <prop key="hibernate.id.new_generator_mappings">true</prop>  <!-- 새 버전의 ID 생성 옵션 -->
                <prop key="hibernate.hbm2ddl.auto">create</prop>             <!-- DDL 자동 생성 -->
            </props>
        </property>
    </bean>

</beans>